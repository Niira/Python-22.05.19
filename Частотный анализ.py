# Курс основы программирования на Python
# Задание по программированию: Частотный анализ
# 22.05.2019
#
# Дан текст. Выведите все слова, встречающиеся в тексте,
# по одному на каждую строку. Слова должны быть отсортированы
# по убыванию их количества появления в тексте, а при одинаковой
# частоте появления — в лексикографическом порядке.
#
# Указание.
#
# После того, как вы создадите словарь всех слов, вам захочется
# отсортировать его по частоте встречаемости слова. Желаемого можно
# добиться, если создать список, элементами которого будут кортежи
# из двух элементов: частота встречаемости слова и само слово.
# Например, [(2, 'hi'), (1, 'what'), (3, 'is')]. Тогда стандартная
# сортировка будет сортировать список кортежей, при этом кортежи
# сравниваются по первому элементу, а если они равны —то по
# второму. Это почти то, что требуется в задаче.
#
# Формат ввода
#
# Вводится текст.
#
# Формат вывода
#
# Выведите ответ на задачу.
#
# inFile - файл с исходными значениями
# onFile - файл с результатами
# wordCountDict - словарь содержащий количество упоминаний слова
# wordList - список из слов и количества их упоминаний
#


def sort_list(a):
    """Функция для сортировки по убыванию количества и
    в лексикографическом порядке"""
    return -a[0], a[1]


inFile = open('input.txt')
onFile = open('output.txt', 'w', encoding='utf8')
wordCountDict = {}
wordList = []
for string in inFile:  # Цикл по тексту
    for word in string.split():  # Цикл по строчкам
        wordCountDict[word] = wordCountDict.get(word, 0) + 1

for now in wordCountDict:  # Цикл для формирования списка кортежей
    wordList.append((wordCountDict[now], now))

wordList.sort(key=sort_list)

for now in wordList:
    print(now[1], file=onFile)

inFile.close()
onFile.close()
